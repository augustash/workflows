name: "Magento 2 artifact deployment"

on:
  workflow_call:
    inputs:
      deploy-environment:
        default: "Staging"
        description: "GitHub environment to run against"
        required: true
        type: "string"
      deploy-target:
        default: "staging"
        description: "The deployment target environment"
        required: true
        type: "string"
      jobs:
        default: "2"
        description: "The number of static asset jobs"
        required: true
        type: "string"
      languages:
        default: "en_US"
        required: true
        type: string
      php-version:
        default: "8.1"
        description: "The target PHP version"
        required: true
        type: "string"
      working-directory:
        default: ""
        description: "The directory, relative to the repository root, where the Magento 2 source is located."
        required: true
        type: string
    outputs:
      composer-cache-dir:
        description: "The Composer cache directory"
        value: "${{ jobs.deploy-magento2-artifact.outputs.composer-cache-dir }}"
    secrets:
      composer-auth:
        description: "Composer authorization credentials"
        required: true
      deploy-ssh-host:
        description: "Deployment server hostname"
        required: true
      deploy-ssh-key:
        description: "Deployment server SSH key"
        required: true
      github-token:
        description: "GitHub access token"
        required: true

env:
  DEPLOY_TARGET: "${{ inputs.deploy-target }}"
  JOBS: "${{ inputs.jobs }}"
  LANGUAGES: "${{ inputs.languages }}"
  PHP_VERSION: "${{ inputs.php-version }}"
  WORKING_DIR: "${{ github.workspace }}${{ inputs.working-directory }}"

jobs:
  deploy-magento2-artifact:
    runs-on: ubuntu-latest
    environment:
      name: "${{ inputs.deploy-environment }}"
      url: "${{ vars.SITE_URL }}"
    outputs:
      composer-cache-dir: "${{ steps.composer-cache.outputs.dir }}"
    steps:
      - name: "Check out project code repository"
        uses: "actions/checkout@v3"

      - name: "Configure PHP environment for artifact build"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          extensions: ":xdebug"
          php-version: "${{ env.PHP_VERSION }}"
          tools: "composer:v2, deployer:7.2"
        env:
          GITHUB_TOKEN: "${{ secrets.github-token }}"

      - name: "Verify project Composer lock exists"
        id: "verify-composer-file"
        uses: "andstor/file-existence-action@v2"
        with:
          files: "${{ env.WORKING_DIR }}/composer.lock"

      - name: "Add Composer authorization credentials"
        if: steps.verify-composer-file.outputs.files_exists == 'true'
        shell: "bash"
        run: |
          echo '${{ secrets.composer-auth }}' > ${{ env.WORKING_DIR }}/auth.json

      - name: "Determine Composer cache directory"
        id: "composer-cache"
        shell: "bash"
        run: |
          echo "dir=$(composer --working-dir=${{ env.WORKING_DIR }} config cache-files-dir)" >> $GITHUB_OUTPUT

        # Using separate cache action until "ramsey/composer-install" fixes caching
      - name: "Use cached Composer assets if available"
        uses: "actions/cache@v3"
        with:
          key: "${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}"
          path: "${{ steps.composer-cache.outputs.dir }}"
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: "Install Composer packages"
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: "--no-progress --no-interaction --no-scripts --no-dev --prefer-dist"
          dependency-versions: "locked"
          ignore-cache: true # see above caching step
          working-directory: "${{ env.WORKING_DIR }}"

      - name: "Compile Magento 2 dependency injection"
        if: success()
        shell: "bash"
        run: |
          php ${{ env.WORKING_DIR }}/bin/magento setup:di:compile --no-interaction

      - name: "Magento 2: enable production mode"
        if: success()
        shell: "bash"
        run: |
          touch ${{ env.WORKING_DIR }}/app/etc/env.php
          echo '<?php return ["MAGE_MODE" => "production"];' > ${{ env.WORKING_DIR }}/app/etc/env.php

        # If this fails, make sure you ran `bin/magento app:config:dump scopes themes`
      - name: "Magento 2: generate static content assets"
        if: success()
        shell: "bash"
        run: |
          php ${{ env.WORKING_DIR }}/bin/magento setup:static-content:deploy -f --no-interaction --jobs ${{ env.JOBS }} -- ${{ env.LANGUAGES }}

      - name: "Magento 2: dump optimized Composer autoload files"
        if: success()
        shell: "bash"
        run: |
          composer --working-dir=${{ env.WORKING_DIR }} dump-autoload --optimize --apcu --no-dev

      - name: "Magento 2: normalize filesystem permissions"
        if: success()
        shell: "bash"
        run: |
          find ${{ env.WORKING_DIR }} -type d ! -perm 2770 -exec chmod 2755 {} +
          find ${{ env.WORKING_DIR }} -type f ! -path '*bin/*' ! -name '*.sh' ! -perm 0660 -exec chmod 0644 {} +

      - name: "Magento 2: create artifact ID file"
        uses: "petemcw/deploy-artifact-id@v1"
        with:
          filename: "VERSION"
          working-directory: "${{ env.WORKING_DIR }}/pub"

      - name: "Magento 2: build and upload artifact"
        uses: "petemcw/deploy-artifact-upload@v1"
        with:
          exclude-file: "${{ github.workspace }}/deploy/.excludes"
          if-no-files-found: "error"
          name: "magento2-artifact"
          retention-days: 1

      - name: "Magento 2: add SSH deployment server known hosts"
        if: success()
        shell: "bash"
        run: |
          KNOWN_HOSTS=$(ssh-keyscan -H ${{ secrets.deploy-ssh-host }})
          echo "KNOWN_HOSTS=$KNOWN_HOSTS" >> $GITHUB_ENV

      - name: "Magento 2: deploy build artifact to deployment server"
        uses: "deployphp/action@v1"
        if: success()
        with:
          dep: "deploy:artifact ${{ env.DEPLOY_TARGET }} -v"
          deployer-binary: "/usr/local/bin/deployer"
          known-hosts: "${{ env.KNOWN_HOSTS }}"
          private-key: "${{ secrets.deploy-ssh-key }}"
